name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - v[0-9]+.*

env:
  CARGO_INCREMENTAL: 0

jobs:
  release:
    name: ${{ matrix.target }}
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            deb: true
          - os: ubuntu-latest
            target: arm-unknown-linux-gnueabihf
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            deb: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        uses: SebRollen/toml-action@v1.0.0
        with:
          file: Cargo.toml
          field: package.version

      - name: Set artifact name
        shell: bash
        run: |
          version="$(git describe --tags --match='v*' --always)"
          name="vnstat-server-$version-${{ matrix.target }}"
          echo "ARTIFACT_NAME=$name" >> $GITHUB_ENV
          echo "version: $version"
          echo "artifact: $name"
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Setup cache
        uses: Swatinem/rust-cache@v1

      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked --target=${{ matrix.target }} --color=always --verbose
          use-cross: ${{ runner.os == 'Linux' }}

      - name: Install cargo-deb
        if: ${{ matrix.deb == true }}
        uses: actions-rs/install@v0.1
        with:
          crate: cargo-deb

      - name: Build deb
        if: ${{ matrix.deb == true }}
        uses: actions-rs/cargo@v1
        with:
          command: deb
          args: --no-build --no-strip --output=. --target=${{ matrix.target }}

      - name: Package (*nix)
        run: >
          tar -cv
          LICENSE README.md
          -C target/${{ matrix.target }}/release/vns
          -C target/${{ matrix.target }}/release/vnsd
          | gzip --best
          > 'vnstat-server-${{ steps.get_version.outputs.value }}-${{ matrix.target }}.tar.gz'

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}
          path: |
            *.deb
            *.tar.gz
            *.zip
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: |
            *.deb
            *.tar.gz
            *.zip
          name: ${{ steps.get_version.outputs.value }}
# jobs:
# create-release:
# runs-on: ubuntu-latest
# steps:
# - uses: actions/checkout@v3
# - uses: ncipollo/release-action@v1
# with:
# token: ${{ secrets.GITHUB_TOKEN }}
# draft: true
# env:
# GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# upload-assets:
# strategy:
# matrix:
# include:
# - target: aarch64-unknown-linux-gnu
# os: ubuntu-latest
# tool: cross
# - target: x86_64-unknown-linux-gnu
# os: ubuntu-latest
# tool: cargo

# runs-on: ${{ matrix.os }}
# steps:
# - uses: actions/checkout@v3
# - name: Install cross-compilation tools
# uses: taiki-e/setup-cross-toolchain-action@v1
# with:
# target: ${{ matrix.target }}
# if: startsWith(matrix.os, 'ubuntu')
# - name: Install deps
# run: |
# sudo apt-get install libsqlite3-dev
# - uses: actions-rs/toolchain@v1
# with:
# profile: minimal
# toolchain: stable

# - uses: Swatinem/rust-cache@v1
# name: Caching
# - uses: taiki-e/upload-rust-binary-action@v1
# name: Upload binaries
# with:
# bin: vns,vnsd
# include: LICENSE
# target: ${{ matrix.target }}
# build_tool: ${{ matrix.tool }}
# archive: vnstat-server-$tag-$target
# en          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
